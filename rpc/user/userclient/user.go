// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: user.proto

package userclient

import (
	"context"

	"github.com/lance977/hmms-zero/rpc/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	PingReq            = user.PingReq
	PingResp           = user.PingResp
	SignInByAccountReq = user.SignInByAccountReq
	SignInByPhoneReq   = user.SignInByPhoneReq
	SignInResp         = user.SignInResp

	User interface {
		// ping
		Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
		// rpc SignIn(SignInReq) returns(SignInResp);
		SingInByAccount(ctx context.Context, in *SignInByAccountReq, opts ...grpc.CallOption) (*SignInResp, error)
		// 通过手机号登录
		SignInByPhone(ctx context.Context, in *SignInByPhoneReq, opts ...grpc.CallOption) (*SignInResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// ping
func (m *defaultUser) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

// rpc SignIn(SignInReq) returns(SignInResp);
func (m *defaultUser) SingInByAccount(ctx context.Context, in *SignInByAccountReq, opts ...grpc.CallOption) (*SignInResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SingInByAccount(ctx, in, opts...)
}

// 通过手机号登录
func (m *defaultUser) SignInByPhone(ctx context.Context, in *SignInByPhoneReq, opts ...grpc.CallOption) (*SignInResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SignInByPhone(ctx, in, opts...)
}
